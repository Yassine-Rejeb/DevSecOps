---
- name: Configure Jenkins VM
  hosts: remote_jenkins
  gather_facts: no
  vars_files:
    - vars/jenkins_vars.yml
  tasks:
    - name: Setting jenkins repo
      get_url:
        url: https://pkg.jenkins.io/redhat-stable/jenkins.repo
        dest: /etc/yum.repos.d/jenkins.repo
    - name: Adding the repo key
      rpm_key:
        state: present
        key: https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
    - name: Updating Everything
      yum:
        name: "*"
        state: latest
    - name: "Installing java-openjdk11"
      command: sudo amazon-linux-extras install java-openjdk11 -y
    - name: Installing Jenkins
      yum: 
        name: jenkins
        state: present
    - name: Enable and start jenkins
      service:
        name: jenkins
        state: started
        enabled: yes
    - name: Daemon-reload
      systemd:
        daemon_reload: yes
    - command: "sudo cat /var/lib/jenkins/secrets/initialAdminPassword"
      register: adminPass
    - name: Get the temporary adminPass
      debug:
        var: adminPass 
    - name: Create Directory init.groovy.d
      file:
        path: /var/lib/jenkins/init.groovy.d/
        state: directory
        owner: jenkins
        group: jenkins
    - name: get the public IP of jenkins
      command: "terraform -chdir={{terraform_path}} output -raw jenkins_public_ip"
      register: jenkins_ip
      delegate_to: localhost
    - name: change the jenkinsUrl in the locationconf file
      lineinfile:
        path: "{{jenkins_model_xml}}"
        regexp: "<jenkinsUrl>"
        line: "<jenkinsUrl>http://{{jenkins_ip.stdout}}:8080/</jenkinsUrl>"
      delegate_to: localhost
    - name: "Turn the number of executors on the Built-in node to 0" 
      lineinfile:
        path: /var/lib/jenkins/config.xml
        regexp: "<numExecutors>"
        line: "<numExecutors>0</numExecutors>"
    - name: copy the init script
      copy:
        src: "{{init_groovy_script}}"
        dest: /var/lib/jenkins/init.groovy.d/1_init.groovy
        owner: jenkins
        group: jenkins
    - name: copy the users script
      copy:
        src: "{{usercreation_groovy}}"
        dest: /var/lib/jenkins/init.groovy.d/2_userCreation.groovy
        owner: jenkins
        group: jenkins
    - name: copy the location conf file
      copy:
        src: "{{jenkins_model_xml}}"
        dest: /var/lib/jenkins/
        owner: jenkins
        group: jenkins
    - name: make sure to get the privat eIP of the prod node
      command: "terraform -chdir={{terraform_path}} output -raw prod_private_ip"
      register: prod_private_ip
      delegate_to: localhost
    - name: Copy the 3_createToken.groovy
      copy:
        src: "{{token_groovy}}"
        dest: /var/lib/jenkins/init.groovy.d/3_createToken.groovy
        owner: jenkins
        group: jenkins
    - name: Restart jenkins to apply setup and create token
      service:
        name: jenkins
        state: restarted    
    - name: Get the token
      fetch:
        src: /tmp/admin
        dest: "{{token_path}}"
    - name: Get the jenkins-cli.jar
      get_url:
        url: "http://{{jenkins_ip.stdout}}:8080/jnlpJars/jenkins-cli.jar"
        dest: /home/ec2-user/jenkins-cli.jar
    - name: Cat the API_Token
      command: "cat /tmp/admin"
      register: api_token
    - name: Create a conf file 
      copy:
        src: "{{conf_xml}}" 
        dest: /home/ec2-user/conf.xml
    - name: Create a new node
      shell: |
        cat /home/ec2-user/conf.xml | java -jar /home/ec2-user/jenkins-cli.jar -auth admin:{{api_token.stdout}} -s http://127.0.0.1:8080/ create-node node1
      ignore_errors: yes
    - name: Get the secret 
      shell: |
        echo 'println jenkins.model.Jenkins.instance.nodesObject.getNode("node1")?.computer?.jnlpMac' | java -jar /home/ec2-user/jenkins-cli.jar -auth admin:{{api_token.stdout}} -s http://127.0.0.1:8080/ groovy =
      register: slave_secret
    - name: Save that secret in case
      copy:
        content: "{{slave_secret.stdout}}"
        dest: "{{slave_secret_file}}"
      delegate_to: localhost
  